export class Mac2Driver extends BaseDriver<any, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<any>, void, import("@appium/types").StringRecord> {
    static newMethodMap: {
        readonly '/session/:sessionId/appium/start_recording_screen': {
            readonly POST: {
                readonly command: "startRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/stop_recording_screen': {
            readonly POST: {
                readonly command: "stopRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
    };
    constructor(opts?: {});
    /** @type {boolean} */
    isProxyActive: boolean;
    /** @type {import('./wda-mac').WDAMacServer} */
    wda: import('./wda-mac').WDAMacServer;
    desiredCapConstraints: {
        systemPort: {
            isNumber: boolean;
        };
        systemHost: {
            isString: boolean;
        };
        showServerLogs: {
            isBoolean: boolean;
        };
        bootstrapRoot: {
            isString: boolean;
        };
        serverStartupTimeout: {
            isNumber: boolean;
        };
        bundleId: {
            isString: boolean;
        };
        arguments: {
            isArray: boolean;
        };
        environment: {
            isObject: boolean;
        };
        noReset: {
            isBoolean: boolean;
        };
        skipAppKill: {
            isBoolean: boolean;
        };
        prerun: {
            isObject: boolean;
        };
        postrun: {
            isObject: boolean;
        };
        webDriverAgentMacUrl: {
            isString: boolean;
        };
        appPath: {
            isString: boolean;
        };
        appLocale: {
            isObject: boolean;
        };
        appTimeZone: {
            isString: boolean;
        };
        initialDeeplinkUrl: {
            isString: boolean;
        };
    };
    settings: DeviceSettings<{}>;
    onSettingsUpdate(key: any, value: any): Promise<unknown>;
    resetState(): void;
    proxyReqRes: any;
    _screenRecorder: any;
    proxyActive(sessionId: any): boolean;
    getProxyAvoidList(sessionId: any): import("@appium/types").RouteMatcher[];
    canProxy(): boolean;
    proxyCommand(url: any, method: any, body?: null): Promise<unknown>;
    getStatus(): Promise<unknown>;
    getWindowRect(): Promise<unknown>;
    createSession(...args: any[]): Promise<(string | import("@appium/types").DriverCaps<any>)[]>;
    deleteSession(): Promise<void>;
    macosLaunchApp: typeof appManagemenetCommands.macosLaunchApp;
    macosActivateApp: typeof appManagemenetCommands.macosActivateApp;
    macosTerminateApp: typeof appManagemenetCommands.macosTerminateApp;
    macosQueryAppState: typeof appManagemenetCommands.macosQueryAppState;
    macosExecAppleScript: typeof appleScriptCommands.macosExecAppleScript;
    executeMacosCommand: typeof executeCommands.executeMacosCommand;
    execute: typeof executeCommands.execute;
    findElOrEls: typeof findCommands.findElOrEls;
    macosSetValue: typeof gesturesCommands.macosSetValue;
    macosClick: typeof gesturesCommands.macosClick;
    macosScroll: typeof gesturesCommands.macosScroll;
    macosSwipe: typeof gesturesCommands.macosSwipe;
    macosRightClick: typeof gesturesCommands.macosRightClick;
    macosHover: typeof gesturesCommands.macosHover;
    macosDoubleClick: typeof gesturesCommands.macosDoubleClick;
    macosClickAndDrag: typeof gesturesCommands.macosClickAndDrag;
    macosClickAndDragAndHold: typeof gesturesCommands.macosClickAndDragAndHold;
    macosKeys: typeof gesturesCommands.macosKeys;
    macosPressAndHold: typeof gesturesCommands.macosPressAndHold;
    macosTap: typeof gesturesCommands.macosTap;
    macosDoubleTap: typeof gesturesCommands.macosDoubleTap;
    macosPressAndDrag: typeof gesturesCommands.macosPressAndDrag;
    macosPressAndDragAndHold: typeof gesturesCommands.macosPressAndDragAndHold;
    macosDeepLink: typeof navigationCommands.macosDeepLink;
    startRecordingScreen: typeof recordScreenCommands.startRecordingScreen;
    stopRecordingScreen: typeof recordScreenCommands.stopRecordingScreen;
    macosScreenshots: typeof screenshotCommands.macosScreenshots;
    macosSource: typeof sourceCommands.macosSource;
}
export default Mac2Driver;
import { BaseDriver } from 'appium/driver';
import { DeviceSettings } from 'appium/driver';
import * as appManagemenetCommands from './commands/app-management';
import * as appleScriptCommands from './commands/applescript';
import * as executeCommands from './commands/execute';
import * as findCommands from './commands/find';
import * as gesturesCommands from './commands/gestures';
import * as navigationCommands from './commands/navigation';
import * as recordScreenCommands from './commands/record-screen';
import * as screenshotCommands from './commands/screenshots';
import * as sourceCommands from './commands/source';
//# sourceMappingURL=driver.d.ts.map