/**
 * Record the display in background while the automated test is running.
 * This method requires FFMPEG (https://www.ffmpeg.org/download.html) to be installed
 * and present in PATH. Also, the Appium process must be allowed to access screen recording
 * in System Preferences->Security & Privacy->Screen Recording.
 * The resulting video uses H264 codec and is ready to be played by media players built-in into web browsers.
 *
 * @param {import('../types').StartRecordingOptions} options - The available options.
 * @this {Mac2Driver}
 * @throws {Error} If screen recording has failed to start or is not supported on the device under test.
 */
export function startRecordingScreen(this: import("../driver").Mac2Driver, options: import('../types').StartRecordingOptions): Promise<void>;
export class startRecordingScreen {
    /**
     * Record the display in background while the automated test is running.
     * This method requires FFMPEG (https://www.ffmpeg.org/download.html) to be installed
     * and present in PATH. Also, the Appium process must be allowed to access screen recording
     * in System Preferences->Security & Privacy->Screen Recording.
     * The resulting video uses H264 codec and is ready to be played by media players built-in into web browsers.
     *
     * @param {import('../types').StartRecordingOptions} options - The available options.
     * @this {Mac2Driver}
     * @throws {Error} If screen recording has failed to start or is not supported on the device under test.
     */
    constructor(this: import("../driver").Mac2Driver, options: import('../types').StartRecordingOptions);
    _screenRecorder: ScreenRecorder;
}
/**
 * Stop recording the screen.
 * If no screen recording has been started before then the method returns an empty string.
 *
 * @param {import('../types').StopRecordingOptions} [options={}] - The available options.
 * @returns {Promise<string>} Base64-encoded content of the recorded media file if 'remotePath'
 * parameter is falsy or an empty string.
 * @this {Mac2Driver}
 * @throws {Error} If there was an error while getting the name of a media file
 * or the file content cannot be uploaded to the remote location
 * or screen recording is not supported on the device under test.
 */
export function stopRecordingScreen(this: import("../driver").Mac2Driver, options?: import("../types").StopRecordingOptions | undefined): Promise<string>;
export type Mac2Driver = import('../driver').Mac2Driver;
declare class ScreenRecorder {
    constructor(videoPath: any, opts?: {});
    _videoPath: any;
    _process: SubProcess | null;
    _fps: any;
    _deviceId: any;
    _captureCursor: any;
    _captureClicks: any;
    _preset: any;
    _videoFilter: any;
    _timeLimit: any;
    getVideoPath(): Promise<any>;
    isRunning(): boolean;
    _enforceTermination(): Promise<string>;
    start(): Promise<void>;
    stop(force?: boolean): Promise<any>;
}
import { SubProcess } from 'teen_process';
export {};
//# sourceMappingURL=record-screen.d.ts.map