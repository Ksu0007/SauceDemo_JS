"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.macosPressAndDragAndHold = exports.macosPressAndDrag = exports.macosDoubleTap = exports.macosTap = exports.macosPressAndHold = exports.macosKeys = exports.macosClickAndDragAndHold = exports.macosClickAndDrag = exports.macosDoubleClick = exports.macosHover = exports.macosRightClick = exports.macosSwipe = exports.macosScroll = exports.macosClick = exports.macosSetValue = void 0;
const support_1 = require("appium/support");
const driver_1 = require("appium/driver");
/**
 *
 * @param {import('@appium/types').StringRecord} [options={}]
 * @param {string[]} [keyNames]
 * @returns {string|null}
 */
function extractUuid(options = {}, keyNames = ['elementId', 'element']) {
    for (const name of keyNames) {
        if (options[name]) {
            const result = support_1.util.unwrapElement(options[name]);
            if (result) {
                return result;
            }
        }
    }
    return null;
}
/**
 *
 * @param {import('@appium/types').StringRecord} [options={}]
 * @param {string[]} [keyNames]
 * @returns {string|null}
 */
function requireUuid(options = {}, keyNames = ['elementId', 'element']) {
    const result = extractUuid(options, keyNames);
    if (!result) {
        throw new driver_1.errors.InvalidArgumentError(`${keyNames[0]} field is mandatory`);
    }
    return result;
}
/**
 * Set value to the given element
 *
 * @this {Mac2Driver}
 * @param {import('../types').SetValueOptions} opts
 */
async function macosSetValue(opts) {
    const uuid = requireUuid(opts);
    const { value, text, keyModifierFlags } = opts ?? {};
    return await this.wda.proxy.command(`/element/${uuid}/value`, 'POST', {
        value, text,
        keyModifierFlags,
    });
}
exports.macosSetValue = macosSetValue;
;
/**
 * Perform click gesture on an element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').ClickOptions} opts
 */
async function macosClick(opts = {}) {
    const uuid = extractUuid(opts);
    const { x, y, keyModifierFlags } = opts;
    const url = uuid ? `/element/${uuid}/click` : '/wda/click';
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        keyModifierFlags,
    });
}
exports.macosClick = macosClick;
;
/**
 * Perform scroll gesture on an element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').ScrollOptions} opts
 */
async function macosScroll(opts = {}) {
    const uuid = extractUuid(opts);
    const { x, y, deltaX, deltaY, keyModifierFlags, } = opts;
    const url = uuid ? `/wda/element/${uuid}/scroll` : '/wda/scroll';
    return await this.wda.proxy.command(url, 'POST', {
        deltaX, deltaY,
        x, y,
        keyModifierFlags,
    });
}
exports.macosScroll = macosScroll;
;
/**
 * Perform swipe gesture on an element
 *
 * @this {Mac2Driver}
 * @param {import('../types').SwipeOptions} opts
 */
async function macosSwipe(opts) {
    const uuid = extractUuid(opts);
    const { x, y, direction, velocity, keyModifierFlags, } = opts ?? {};
    const url = uuid ? `/wda/element/${uuid}/swipe` : `/wda/swipe`;
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        direction,
        velocity,
        keyModifierFlags,
    });
}
exports.macosSwipe = macosSwipe;
;
/**
 * Perform right click gesture on an element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').RightClickOptions} opts
 */
async function macosRightClick(opts = {}) {
    const uuid = extractUuid(opts);
    const { x, y, keyModifierFlags } = opts;
    const url = uuid ? `/wda/element/${uuid}/rightClick` : '/wda/rightClick';
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        keyModifierFlags,
    });
}
exports.macosRightClick = macosRightClick;
;
/**
 * Perform hover gesture on an element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').HoverOptions} opts
 */
async function macosHover(opts = {}) {
    const uuid = extractUuid(opts);
    const { x, y, keyModifierFlags } = opts;
    const url = uuid ? `/wda/element/${uuid}/hover` : '/wda/hover';
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        keyModifierFlags,
    });
}
exports.macosHover = macosHover;
;
/**
 * Perform double click gesture on an element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').DoubleClickOptions} opts
 */
async function macosDoubleClick(opts = {}) {
    const uuid = extractUuid(opts);
    const { x, y, keyModifierFlags } = opts;
    const url = uuid ? `/wda/element/${uuid}/doubleClick` : '/wda/doubleClick';
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        keyModifierFlags,
    });
}
exports.macosDoubleClick = macosDoubleClick;
;
/**
 * Perform long click and drag gesture on an element or by absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').ClickAndDragOptions} opts
 */
async function macosClickAndDrag(opts) {
    const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
    const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
    const { startX, startY, endX, endY, duration, keyModifierFlags } = opts ?? {};
    const url = sourceUuid && destUuid
        ? `/wda/element/${sourceUuid}/clickAndDrag`
        : '/wda/clickAndDrag';
    const dest = destUuid && support_1.util.wrapElement(destUuid);
    return await this.wda.proxy.command(url, 'POST', {
        startX, startY,
        endX, endY,
        duration,
        dest,
        keyModifierFlags,
    });
}
exports.macosClickAndDrag = macosClickAndDrag;
;
/**
 * Perform long click, drag and hold gesture on an element or by absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').ClickAndDragAndHoldOptions} opts
 */
async function macosClickAndDragAndHold(opts) {
    const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
    const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
    const { startX, startY, endX, endY, duration, holdDuration, velocity, keyModifierFlags } = opts ?? {};
    const url = sourceUuid && destUuid
        ? `/wda/element/${sourceUuid}/clickAndDragAndHold`
        : '/wda/clickAndDragAndHold';
    const dest = destUuid && support_1.util.wrapElement(destUuid);
    return await this.wda.proxy.command(url, 'POST', {
        startX, startY,
        endX, endY,
        duration, holdDuration,
        velocity,
        dest,
        keyModifierFlags,
    });
}
exports.macosClickAndDragAndHold = macosClickAndDragAndHold;
;
/**
 * Send keys to the given element or to the application under test
 *
 * @this {Mac2Driver}
 * @param {import('../types').KeysOptions} opts
 */
async function macosKeys(opts) {
    const uuid = extractUuid(opts);
    const { keys } = opts ?? {};
    const url = uuid ? `/wda/element/${uuid}/keys` : '/wda/keys';
    return await this.wda.proxy.command(url, 'POST', { keys });
}
exports.macosKeys = macosKeys;
;
/**
 * Perform press gesture on a Touch Bar element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').PressOptions} opts
 */
async function macosPressAndHold(opts) {
    const uuid = extractUuid(opts);
    const { x, y, duration, keyModifierFlags } = opts ?? {};
    const url = uuid ? `/wda/element/${uuid}/press` : '/wda/press';
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        duration,
        keyModifierFlags,
    });
}
exports.macosPressAndHold = macosPressAndHold;
;
/**
 * Perform tap gesture on a Touch Bar element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').TapOptions} opts
 */
async function macosTap(opts = {}) {
    const uuid = extractUuid(opts);
    const { x, y, keyModifierFlags } = opts ?? {};
    const url = uuid ? `/wda/element/${uuid}/tap` : '/wda/tap';
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        keyModifierFlags,
    });
}
exports.macosTap = macosTap;
;
/**
 * Perform tap gesture on a Touch Bar element or by relative/absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').DoubleTapOptions} opts
 */
async function macosDoubleTap(opts = {}) {
    const uuid = extractUuid(opts);
    const { x, y, keyModifierFlags } = opts;
    const url = uuid ? `/wda/element/${uuid}/doubleTap` : '/wda/doubleTap';
    return await this.wda.proxy.command(url, 'POST', {
        x, y,
        keyModifierFlags,
    });
}
exports.macosDoubleTap = macosDoubleTap;
;
/**
 * Perform long press and drag gesture on a Touch Bar element or by absolute coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').PressAndDragOptions} opts
 */
async function macosPressAndDrag(opts) {
    const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
    const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
    const { startX, startY, endX, endY, duration, keyModifierFlags } = opts ?? {};
    const url = sourceUuid && destUuid
        ? `/wda/element/${sourceUuid}/pressAndDrag`
        : '/wda/pressAndDrag';
    const dest = destUuid && support_1.util.wrapElement(destUuid);
    return await this.wda.proxy.command(url, 'POST', {
        startX, startY,
        endX, endY,
        duration,
        dest,
        keyModifierFlags,
    });
}
exports.macosPressAndDrag = macosPressAndDrag;
;
/**
 * Perform press, drag and hold gesture on a Touch Bar element or by absolute Touch Bar coordinates
 *
 * @this {Mac2Driver}
 * @param {import('../types').PressAndDragAndHoldOptions} opts
 */
async function macosPressAndDragAndHold(opts) {
    const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
    const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
    const { startX, startY, endX, endY, duration, holdDuration, velocity, keyModifierFlags } = opts ?? {};
    const url = sourceUuid && destUuid
        ? `/wda/element/${sourceUuid}/pressAndDragAndHold`
        : '/wda/pressAndDragAndHold';
    const dest = destUuid && support_1.util.wrapElement(destUuid);
    return await this.wda.proxy.command(url, 'POST', {
        startX, startY,
        endX, endY,
        duration, holdDuration,
        velocity,
        dest,
        keyModifierFlags,
    });
}
exports.macosPressAndDragAndHold = macosPressAndDragAndHold;
;
/**
 * @typedef {import('../driver').Mac2Driver} Mac2Driver
 */
//# sourceMappingURL=gestures.js.map