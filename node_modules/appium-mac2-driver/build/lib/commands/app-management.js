"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.macosQueryAppState = exports.macosTerminateApp = exports.macosActivateApp = exports.macosLaunchApp = void 0;
/**
 * Start an app with given bundle identifier or activates it
 * if the app is already running. An exception is thrown if the
 * app with the given identifier cannot be found.
 *
 * @this {Mac2Driver}
 * @param {import('../types').LaunchAppOptions} [opts={}]
 */
async function macosLaunchApp(opts = {}) {
    const { bundleId, environment, path } = opts;
    return await this.wda.proxy.command('/wda/apps/launch', 'POST', {
        arguments: opts.arguments,
        environment,
        bundleId,
        path,
    });
}
exports.macosLaunchApp = macosLaunchApp;
;
/**
 * Activate an app with given bundle identifier. An exception is thrown if the
 * app cannot be found or is not running.
 *
 * @this {Mac2Driver}
 * @param {import('../types').ActivateAppOptions} [opts={}]
 */
async function macosActivateApp(opts = {}) {
    const { bundleId, path } = opts;
    return await this.wda.proxy.command('/wda/apps/activate', 'POST', { bundleId, path });
}
exports.macosActivateApp = macosActivateApp;
;
/**
 * Terminate an app with given bundle identifier. An exception is thrown if the
 * app cannot be found.
 *
 * @this {Mac2Driver}
 * @param {import('../types').TerminateAppOptions} opts
 * @returns {Promise<boolean>} `true` if the app was running and has been successfully terminated.
 * `false` if the app was not running before.
 */
async function macosTerminateApp(opts) {
    const { bundleId, path } = opts ?? {};
    return /** @type {boolean} */ (await this.wda.proxy.command('/wda/apps/terminate', 'POST', { bundleId, path }));
}
exports.macosTerminateApp = macosTerminateApp;
;
/**
 * Query an app state with given bundle identifier. An exception is thrown if the
 * app cannot be found.
 *
 * @this {Mac2Driver}
 * @param {import('../types').QueryAppStateOptions} opts
 * @returns {Promise<number>} The application state code. See
 * https://developer.apple.com/documentation/xctest/xcuiapplicationstate?language=objc
 * for more details
 */
async function macosQueryAppState(opts) {
    const { bundleId, path } = opts ?? {};
    return /** @type {number} */ (await this.wda.proxy.command('/wda/apps/state', 'POST', { bundleId, path }));
}
exports.macosQueryAppState = macosQueryAppState;
;
/**
 * @typedef {import('../driver').Mac2Driver} Mac2Driver
 */
//# sourceMappingURL=app-management.js.map