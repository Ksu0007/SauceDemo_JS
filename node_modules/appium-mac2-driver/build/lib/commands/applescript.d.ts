/**
 * Executes the given AppleScript command or a whole script based on the
 * given options. Either of these options must be provided. If both are provided
 * then the `command` one gets the priority.
 * Note that AppleScript command cannot contain line breaks. Consider making it
 * to a script in such case.
 * Note that by default AppleScript engine blocks commands/scripts execution if your script
 * is trying to access some private entities, like cameras or the desktop screen
 * and no permissions to do it are given to the parent (for example, Appium or Terminal)
 * process in System Preferences -> Privacy list.
 *
 * @this {Mac2Driver}
 * @param {import('../types').ExecAppleScriptOptions} opts
 * @returns {Promise<string>} The actual stdout of the given command/script
 * @throws {Error} If the exit code of the given command/script is not zero.
 * The actual stderr output is set to the error message value.
 */
export function macosExecAppleScript(this: import("../driver").Mac2Driver, opts?: import('../types').ExecAppleScriptOptions): Promise<string>;
export type Mac2Driver = import('../driver').Mac2Driver;
//# sourceMappingURL=applescript.d.ts.map